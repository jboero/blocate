#!/bin/bash
# Bindex v1.0
# boeroboy@gmail.com
# Use this to index a simple file or directory to SQLite.
# Paired with blocate search. Find command and parallel options can be adjusted.
# This version does not support multiple filesystems with inode as prim key.
export tgt="${1:-.}"
export BINDEXDB="${BINDEXDB:-${2:-blocate.sqlite}}"

sqlite3 "$BINDEXDB" \
	"CREATE TABLE IF NOT EXISTS inode_v1 (id int NOT NULL PRIMARY KEY, parent int, name varchar(256));"

# Index a single path by just inode, parent inode, and name.
# Locals used because I started with recursion.
index()
{
	local name=$(basename "$1" | sed "s/'/\\'/g" )
	local pare=$(dirname "$1")
	local ino=$(ls -di "$1" | awk '{print $1}')
	local pino=$(ls -di "$pare" | awk '{print $1}')
	# Don't index self where ino=pino (loop).  Also beware symlinks.
	if [ $ino -eq $pino ]; then
		return
	fi
	sqlite3 -cmd ".timeout 2000" "$BINDEXDB" \
		"insert or replace into inode_v1 (id, parent, name) values ($ino, $pino, '$name');"
}

export -f index

# If path given is a file, add it to index.  Otherwise find traverse index.
if [[ -f "$tgt" ]]; then
	index "$tgt"
elif [[ -d "$tgt" ]]; then
	find "$tgt" -type d | xargs -n 1 -P 10 -I {} bash -c 'index "$@"' _ {}
fi
